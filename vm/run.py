#!/usr/bin/env python
import marshal
from optparse import OptionParser
from xml.etree import ElementTree as ET

from pyc2xml import assemble
from vm import VirtualMachine


class Dummy:
    pass


def co_elem(elem):
    if elem.tag == 'code':
        co = Dummy()
        for e in elem.getchildren():
            assert e.tag.startswith('co_')
            setattr(co, e.tag, co_elem(e))
        return co
    
    elif elem.tag.startswith('co_'):
        text = elem.text
        name = elem.tag[3:]
        if name in 'filename name'.split():
            return text
        
        elif name in 'argcount firstlineno nlocals stacksize'.split():
            return int(text)
        
        elif name in 'cellvars freevars names varnames consts'.split():
            return tuple(co_elem(e) for e in elem)
        
        elif name == 'flags':
            assert len(text) == 6
            assert text[:2] == '0x'
            return int(text[2:], 16)
        
        elif name == 'lnotab':
            assert text[:2] == '0x'
            return text[2:].decode('hex')
        
        elif name == 'code':
            return assemble(text)

    else:
        return eval(elem.text)


def inputCodeObject():
    c = ''
    i = raw_input('>>> ')
    try:
        co = compile(i, '<input>', 'eval')
        return co
    except:
        try:
            co = compile(i, '<input>', 'exec')
            return co
        except SyntaxError, e:
            if not c and str(e).startswith('unexpected EOF'):
                c = i+'\n'
            else:
                raise
    while 1:
        i = raw_input('... ')
        if i:
            c += '%s\n' % i
        else:
            break
    return compile(c, '<input>', 'exec')


def main():
    parser = OptionParser(usage = "usage: %prog [options] [FILE]",
                          description = """\
Pythom virtual machine -- FILE may be
(i) a python source file (ii) pyc (iii) XML generated by pyc2xml.""")
    
    parser.add_option("-i", "--interactive",
                      action  = "store_true",
                      help    = "Interactive mode")
    
    parser.add_option("-s", "--suppress",
                      action  = "store_true",
                      help    = "Suppress the stdout from interpreted program")

    parser.add_option("-v", "--verbose",
                      action  = "count",
                      help    = "Be verbose, use -vv to be even more verbose")
    
    options, args = parser.parse_args()

    if len(args) > 1:
        parser.error("incorrect number of arguments")

    #vm = VirtualMachine({'__builtins__': globals()['__builtins__']}, options)
    vm = VirtualMachine(options)
    
    if args:
        fname = args[0]

        if fname.endswith('.xml'):
            co = co_elem(ET.XML(open(fname).read()).find('code'))
            
        elif fname.endswith(('.pyc', '.pyo')):
            f = open(fname, "rb")
            f.read(8)
            co = marshal.load(f)
            
        else:   # assume python source code
            co = compile(open(fname).read(), '<input>', 'exec')
            
        vm.loadCode(co)
        vm.run()
        
    if options.interactive:
        while 1:
            try:
                co = inputCodeObject()
                vm.loadCode(co)
                val = vm.run()
                if val != None:
                    print val
            except EOFError:
                break
            except KeyboardInterrupt:
                print "KeyboardInterrupt"
            except:
                import traceback
                traceback.print_exc()
        print


if __name__ == '__main__':
    main()
